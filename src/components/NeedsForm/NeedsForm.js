import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Box,
  IconButton,
  Typography,
  MenuItem,
  InputAdornment
} from '@mui/material';
import { Close, Link as LinkIcon } from '@mui/icons-material';

const NeedsForm = ({ onSubmit, onClose, initialData, isEditing = false }) => {
  const [formData, setFormData] = useState({
    name: initialData?.name || '',
    quantity: initialData?.quantity || '',
    priority: initialData?.priority || 'medium',
    link: initialData?.link || '',
    notes: initialData?.notes || '',
    status: initialData?.status || 'pending'
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    
    const needData = {
      ...formData,
      quantity: parseInt(formData.quantity) || 1
    };
    
    onSubmit(needData);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (!isEditing) {
      setFormData({
        name: '',
        quantity: '',
        priority: 'medium',
        link: '',
        notes: '',
        status: 'pending'
      });
    }
  };

  const handleChange = (field) => (e) => {
    setFormData(prev => ({
      ...prev,
      [field]: e.target.value
    }));
  };

  const priorities = [
    { value: 'low', label: 'üü¢ –ù–∏–∑–∫–∏–π' },
    { value: 'medium', label: 'üü° –°—Ä–µ–¥–Ω–∏–π' },
    { value: 'high', label: 'üî¥ –í—ã—Å–æ–∫–∏–π' }
  ];

  const statuses = [
    { value: 'pending', label: '‚è≥ –û–∂–∏–¥–∞–µ—Ç' },
    { value: 'ordered', label: 'üì¶ –ó–∞–∫–∞–∑–∞–Ω–æ' },
    { value: 'received', label: '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ' }
  ];

  return (
    <Dialog open={true} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography variant="h6">
            {isEditing ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É' : 'üõí –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é'}
          </Typography>
          <IconButton onClick={onClose}>
            <Close />
          </IconButton>
        </Box>
      </DialogTitle>

      <form onSubmit={handleSubmit}>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *"
              value={formData.name}
              onChange={handleChange('name')}
              required
              placeholder="–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å?"
            />

            <Box sx={{ display: 'flex', gap: 2 }}>
              <TextField
                fullWidth
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *"
                type="number"
                value={formData.quantity}
                onChange={handleChange('quantity')}
                required
                InputProps={{
                  inputProps: { min: 1 }
                }}
              />
              
              <TextField
                fullWidth
                select
                label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç *"
                value={formData.priority}
                onChange={handleChange('priority')}
                required
              >
                {priorities.map((option) => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </TextField>
            </Box>

            {/* –°—Å—ã–ª–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å */}
            <TextField
              fullWidth
              label="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"
              value={formData.link}
              onChange={handleChange('link')}
              placeholder="https://example.com/product"
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <LinkIcon color="action" />
                  </InputAdornment>
                ),
              }}
            />

            {isEditing && (
              <TextField
                fullWidth
                select
                label="–°—Ç–∞—Ç—É—Å"
                value={formData.status}
                onChange={handleChange('status')}
              >
                {statuses.map((option) => (
                  <MenuItem key={option.value} value={option.value}>
                    {option.label}
                  </MenuItem>
                ))}
              </TextField>
            )}

            {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏—è */}
            <TextField
              fullWidth
              label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
              multiline
              rows={3}
              value={formData.notes}
              onChange={handleChange('notes')}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –≥–¥–µ –∏—Å–∫–∞—Ç—å..."
            />
          </Box>
        </DialogContent>

        <DialogActions sx={{ px: 3, pb: 3 }}>
          <Button onClick={onClose}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            type="submit" 
            variant="contained" 
            disabled={!formData.name || !formData.quantity}
          >
            {isEditing ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : 'üõí –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default NeedsForm;